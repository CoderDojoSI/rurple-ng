#!/usr/bin/env python

from __future__ import division, print_function

import math
import wx
from wx.lib.scrolledpanel import ScrolledPanel
import wx.stc
import wx.lib.wxcairo
import cairo

import maze
import cpu

class MyFrame(wx.Frame):
    def __init__(self, *args, **kw):
        wx.Frame.__init__(self, *args, **kw)
        self._cpu = cpu.CPU(self)
        mymaze = maze.Maze(10, 10)
        self._robot = maze.Robot(mymaze)
        mymaze.AddObject(self._robot)
        sash = wx.SplitterWindow(self)
        stc = wx.stc.StyledTextCtrl(sash)
        sp = ScrolledPanel(sash)
        maze.EditableMazeWindow(sp, size=(900,900), maze=mymaze)
        sash.SplitVertically(stc, sp)
        sp.SetupScrolling()
        self.CreateStatusBar()
        menuBar = wx.MenuBar()
        filemenu = wx.Menu()
        self.Bind(wx.EVT_MENU, self.OnAbout,
            filemenu.Append(wx.ID_ABOUT, "&About..."," Information about this program"))
        filemenu.AppendSeparator()
        self.Bind(wx.EVT_MENU, self.OnExit,
            filemenu.Append(wx.ID_EXIT,"E&xit"," Terminate the program"))
        menuBar.Append(filemenu,"&File")
        self.SetMenuBar(menuBar)
        toolbar = self.CreateToolBar()
        tsize = (24,24)
        toolbar.SetToolBitmapSize(tsize)
        play_bmp = wx.ArtProvider.GetBitmap(wx.ART_REDO, wx.ART_TOOLBAR, tsize)
        self.Bind(wx.EVT_TOOL, (lambda e: self._cpu.Play()), 
            toolbar.AddLabelTool(wx.ID_ANY, "Play", play_bmp, 
                shortHelp="Play"))
        # Cheat - play anyway, for testing
        wx.CallLater(1500, self._cpu.Play)
        slider = wx.Slider(toolbar, size=(250,-1))
        toolbar.AddControl(slider)
        
    def OnAbout(self, e):
        d = wx.MessageDialog(self, " A test application \n"
                            " in wxPython","About test app", wx.OK)
        d.ShowModal()
        d.Destroy()
    
    def OnExit(self, e):
        self.Close(True)

    def program(self):
        return """
move()
turn_left()
move()
"""

    def getGlobals(self):
        return {
            "move": self._cpu.ProxyFunction(self._robot.move),
            "turn_left": self._cpu.ProxyFunction(self._robot.turn_left)
        }

    def traceLine(self, rcb, line):
        print("Line", line)
        wx.CallLater(1000, rcb, (None, None))
            
    def done(self, e):
        print("Done, exception:", e)

class MyApp(wx.App):
    def OnInit(self):
        frame = MyFrame(None, title="This is a test", size=(900,1000))
        frame.Show(True)
        self.SetTopWindow(frame)
        return True

def main():
    app = MyApp(0)
    app.MainLoop()

if __name__ == "__main__":
    main()

