#!/usr/bin/env python

import math
import wx
import wx.lib.wxcairo

class MyWindow(wx.Window):
    def __init__(self, *args, **kw):
        wx.Window.__init__(self, *args, **kw)
        wx.EVT_PAINT(self, self.OnPaint)
        wx.EVT_LEFT_DOWN(self, self.OnClick)
        self._radius = 10
        self._dots = [(10,10), (100,100)]
        self._width = 10
        self._height = 10
        self._spacing = 40
    
    def OnPaint(self, e):
        self.Paint(self.GetUpdateRegion().GetBox())
        
    def Paint(self, box):
        dc = wx.PaintDC(self)
        ctx = wx.lib.wxcairo.ContextFromDC(dc)
        ctx.rectangle(box.GetX(), box.GetY(), box.GetWidth(), box.GetHeight())
        ctx.clip()
        ctx.set_source_rgb(1, 1, 1)
        ctx.paint()
        self.CairoPaint(ctx)
        
    def CairoPaint(self, ctx):
        ctx.set_source_rgb(0, 0, 0)
        ctx.set_line_width(0.3)
        for i in range(self._height +1):
            ctx.move_to(self._spacing, self._spacing*(1 + 2*i))
            ctx.line_to(self._spacing*(1 + 2 * self._width), self._spacing*(1 + 2*i))
        for i in range(self._width +1):
            ctx.move_to(self._spacing*(1 + 2*i), self._spacing)
            ctx.line_to(self._spacing*(1 + 2*i), self._spacing*(1 + 2 * self._height))
        ctx.stroke()
        ctx.set_source_rgb(0, 0, 1)
        for dot in self._dots:
            ctx.arc(dot[0], dot[1], self._radius, 0, 2*math.pi)
            ctx.close_path()
        ctx.fill()
                
    def OnClick(self, e):
        self._dots.append((e.m_x, e.m_y))
        self.Paint(wx.Rect(e.m_x - self._radius, e.m_y - self._radius, self._radius *2, self._radius *2))

class MyFrame(wx.Frame):
    def __init__(self, *args, **kw):
        wx.Frame.__init__(self, *args, **kw)
        self.CreateStatusBar()
        filemenu= wx.Menu()
        self.Bind(wx.EVT_MENU, self.OnAbout,
            filemenu.Append(wx.ID_ABOUT, "&About..."," Information about this program"))
        filemenu.AppendSeparator()
        self.Bind(wx.EVT_MENU, self.OnExit,
            filemenu.Append(wx.ID_EXIT,"E&xit"," Terminate the program"))
        # Creating the menubar.
        menuBar = wx.MenuBar()
        menuBar.Append(filemenu,"&File") # Adding the "filemenu" to the MenuBar
        self.SetMenuBar(menuBar)  # Adding the MenuBar to the Frame content.
        MyWindow(self)

    def OnAbout(self, e):
        d = wx.MessageDialog( self, " A sample editor \n"
                            " in wxPython","About Sample Editor", wx.OK)
                            # Create a message dialog box
        d.ShowModal() # Shows it
        d.Destroy() # finally destroy it when finished.

    def OnExit(self, e):
        self.Close(True)

class MyApp(wx.App):
    def OnInit(self):
        frame = MyFrame(None, title="This is a test", size=(880,880))
        frame.Show(True)
        self.SetTopWindow(frame)
        return True

def main():
    app = MyApp(0)
    app.MainLoop()

if __name__ == "__main__":
    main()


