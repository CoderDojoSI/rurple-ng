#!/usr/bin/env python

from __future__ import division

import math
import wx
import wx.lib.wxcairo
import cairo

class MyWindow(wx.Window):
    def __init__(self, *args, **kw):
        wx.Window.__init__(self, *args, **kw)
        wx.EVT_PAINT(self, self.OnPaint)
        wx.EVT_LEFT_DOWN(self, self.OnClick)
        self._radius = 10
        self._width = 10
        self._height = 10
        self._spacing = 40
        self._offset = 40
        self._walls = set()
    
    def OnPaint(self, e):
        self.Paint(self.GetUpdateRegion().GetBox())
        
    def Paint(self, box):
        dc = wx.PaintDC(self)
        ctx = wx.lib.wxcairo.ContextFromDC(dc)
        ctx.rectangle(box.GetX(), box.GetY(), box.GetWidth(), box.GetHeight())
        ctx.clip()
        ctx.set_source_rgb(1, 1, 1)
        ctx.paint()
        self.CairoPaint(ctx)
        
    def CairoPaint(self, ctx):
        ctx.translate(self._offset, self._offset)
        ctx.set_source_rgb(0, 0, 0)
        ctx.set_line_width(0.3)
        for i in range(self._height +1):
            ctx.move_to(0, self._spacing*2*i)
            ctx.line_to(self._spacing*2*self._width, self._spacing*2*i)
        for i in range(self._width +1):
            ctx.move_to(self._spacing*2*i, 0)
            ctx.line_to(self._spacing*2*i, self._spacing*2 * self._height)
        ctx.stroke()
        ctx.set_line_cap(cairo.LINE_CAP_SQUARE)
        for x, y, d in self._walls:
            ctx.move_to(self._spacing*2*x, self._spacing*2*y)
            if d == 'v':
               ctx.line_to(self._spacing*2*x, self._spacing*(2 + 2*y))
            else:
               ctx.line_to(self._spacing*(2 + 2*x), self._spacing*2*y)
        ctx.set_source_rgb(0, 0, 0)
        ctx.set_line_width(10)
        ctx.stroke_preserve()    
        ctx.set_source_rgb(1, 0, 0)
        ctx.set_line_width(4)
        ctx.stroke()
        
    def paint_squares(self, x, y, w, h):
        self.Paint(wx.Rect(self._offset + self._spacing*(2*x -1),
                           self._offset + self._spacing*(2*y -1),
                           self._spacing*2*(w+1), self._spacing*2*(h+1)))
    
    def OnClick(self, e):
        x = e.m_x - self._offset
        y = e.m_y - self._offset
        xx = (x % (self._spacing*2)) - self._spacing
        yy = (y % (self._spacing*2)) - self._spacing
        x = x // (self._spacing*2)
        y = y // (self._spacing*2)
        if xx >= yy and xx >= -yy:
            self.toggle_wall(x +1, y, 'v')
        elif xx <= yy and xx <= -yy:
            self.toggle_wall(x, y, 'v')
        elif yy >= 0:
            self.toggle_wall(x, y+1, 'h')
        else:
            self.toggle_wall(x, y, 'h')
    
    def toggle_wall(self, x, y, d):
        self._walls ^= set([(x, y, d)])
        if d == 'h':
            self.paint_squares(x, y, 1, 0)
        else:
            self.paint_squares(x, y, 0, 1)
        

class MyFrame(wx.Frame):
    def __init__(self, *args, **kw):
        wx.Frame.__init__(self, *args, **kw)
        self.CreateStatusBar()
        filemenu= wx.Menu()
        self.Bind(wx.EVT_MENU, self.OnAbout,
            filemenu.Append(wx.ID_ABOUT, "&About..."," Information about this program"))
        filemenu.AppendSeparator()
        self.Bind(wx.EVT_MENU, self.OnExit,
            filemenu.Append(wx.ID_EXIT,"E&xit"," Terminate the program"))
        # Creating the menubar.
        menuBar = wx.MenuBar()
        menuBar.Append(filemenu,"&File") # Adding the "filemenu" to the MenuBar
        self.SetMenuBar(menuBar)  # Adding the MenuBar to the Frame content.
        MyWindow(self)

    def OnAbout(self, e):
        d = wx.MessageDialog( self, " A sample editor \n"
                            " in wxPython","About Sample Editor", wx.OK)
                            # Create a message dialog box
        d.ShowModal() # Shows it
        d.Destroy() # finally destroy it when finished.

    def OnExit(self, e):
        self.Close(True)

class MyApp(wx.App):
    def OnInit(self):
        frame = MyFrame(None, title="This is a test", size=(880,880))
        frame.Show(True)
        self.SetTopWindow(frame)
        return True

def main():
    app = MyApp(0)
    app.MainLoop()

if __name__ == "__main__":
    main()


